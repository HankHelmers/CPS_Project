%% CREATING A SAMPLE APP USING MATLAB APP DESIGNER

%% SpotifyHandler class
% Contols all interations between Spotify's API (SpotifyAuthorization) and 
% the UI, where the UI can draw the information necessary from this class 
% to populate the visuals for the user. 
classdef SpotifyHandler 
    properties  
        data; 
    end
    
    methods (Access = public)   
        function obj = SpotifyHandler(inputData)
            inputData.valence = SpotifyHandler.normToRange(inputData.valence, 0, 1, -1, 1);
            inputData.energy = SpotifyHandler.normToRange(inputData.energy, 0, 1, -1, 1);
            
            obj.data = inputData;
        end
    end

    methods (Access = public) 
%         function RequestAuthentication()
%             SpotifyAuthorization.RequestAuthInAPI(); 
%         end
% 
%         % Getters & Setters
%         function authCode=setAuthCode(newPostAuthUrl)
%             obj.authCode = SpotifyAuthorization.ParsePostAuthUrl(newPostAuthUrl);
%             authCode = obj.authCode;
%             %disp(obj.authCode)
%         end 

        function plotEnergyValence()
            disp(SpotifyHandler.data)l
            data = SpotifyHandler.data

            disp(data);                                              

%             labels = data.name + ", " + data.artist;
%             
%             plot(valence,energy,'o')
%             xlabel('valence')
%             ylabel('energy')
%             grid('on')
%             labelpoints(valence,energy,labels)
        end

        function getHappySongs() 
            data = SpotifyHandler().data;

            data.valence = SpotifyHandler.normToRange(data.valence, 0, 1, -1, 1);
            data.energy = SpotifyHandler.normToRange(data.energy, 0, 1, -1, 1);
            
            % calculate average between valence & energy values
            data.ValenceEnergyAverage = (data.valence + data.energy)./2;
            data = sortrows(data, 'ValenceEnergyAverage', 'descend');
            
            SpotifyHandler.plotEnergyValence();
            
            % valenceZeroSortedByEnergy = sortrows(valenceGreaterThanZero, {'energy', 'valence'}, 'descend');
            
            disp(data(1:10,["name", "artist", 'ValenceEnergyAverage']))
        end

        function getSadSongs() 
            data = SpotifyHandler.data;

            data.valence = SpotifyHandler.normToRange(data.valence, 0, 1, -1, 1);
            data.energy = SpotifyHandler.normToRange(data.energy, 0, 1, -1, 1);
            
            % calculate average between valence & energy values, sort -1 ->
            % 1
            data.ValenceEnergyAverage = (data.valence + data.energy)./2;
            data = sortrows(data, 'ValenceEnergyAverage', 'ascend');
            
            SpotifyHandler.plotEnergyValence()
                        
            disp(data(1:10,["name", "artist", 'ValenceEnergyAverage']))
        end

        function new_data=normToRange(data, old_min, old_max, new_min, new_max) 
            new_data = ( (data - old_min)./(old_max - old_min) ).* (new_max - new_min) + new_min;
        end
    end
end



